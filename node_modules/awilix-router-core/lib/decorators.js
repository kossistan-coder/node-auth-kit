"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ALL = exports.PATCH = exports.OPTIONS = exports.CONNECT = exports.DELETE = exports.PUT = exports.POST = exports.HEAD = exports.GET = exports.verbs = exports.after = exports.before = exports.route = void 0;
const http_verbs_1 = require("./http-verbs");
const invariant_1 = require("./invariant");
const state_util_1 = require("./state-util");
/**
 * Registers a path for this class method.
 * You can add more than one.
 *
 * @param path
 */
function route(path) {
    return function routerDecorator(target, name = null) {
        (0, state_util_1.updateState)(target, (state) => (0, state_util_1.addRoute)(state, name, path));
    };
}
exports.route = route;
/**
 * Adds one or more middleware before the method middleware.
 * Can be applied to classes and methods. Class-level `before` middleware
 * runs before method-level ones.
 *
 * @param middleware
 */
function before(middleware) {
    return function routerDecorator(target, name = null) {
        (0, state_util_1.updateState)(target, (state) => (0, state_util_1.addBeforeMiddleware)(state, name, middleware));
    };
}
exports.before = before;
/**
 * Adds one or more middleware after the method middleware.
 * Can be applied to classes and methods. Class-level `after` middleware
 * runs after method-level ones.
 *
 * @param middleware
 */
function after(middleware) {
    return function routerDecorator(target, name = null) {
        (0, state_util_1.updateState)(target, (state) => (0, state_util_1.addAfterMiddleware)(state, name, middleware));
    };
}
exports.after = after;
/**
 * Assigns one or more HTTP verbs to class method.
 *
 * @param httpVerbs
 */
function verbs(httpVerbs) {
    return function verbsDecorator(target, name = null) {
        (0, invariant_1.invariant)(name, 'The "verbs" decorator can only be used on class verbs.');
        (0, state_util_1.updateState)(target, (state) => (0, state_util_1.addHttpVerbs)(state, name, httpVerbs));
    };
}
exports.verbs = verbs;
/**
 * The same as `verbs([HttpVerbs.GET])`
 */
const GET = () => verbs([http_verbs_1.HttpVerbs.GET]);
exports.GET = GET;
/**
 * The same as `verbs([HttpVerbs.HEAD])`
 */
const HEAD = () => verbs([http_verbs_1.HttpVerbs.HEAD]);
exports.HEAD = HEAD;
/**
 * The same as `verbs([HttpVerbs.POST])`
 */
const POST = () => verbs([http_verbs_1.HttpVerbs.POST]);
exports.POST = POST;
/**
 * The same as `verbs([HttpVerbs.PUT])`
 */
const PUT = () => verbs([http_verbs_1.HttpVerbs.PUT]);
exports.PUT = PUT;
/**
 * The same as `verbs([HttpVerbs.DELETE])`
 */
const DELETE = () => verbs([http_verbs_1.HttpVerbs.DELETE]);
exports.DELETE = DELETE;
/**
 * The same as `verbs([HttpVerbs.CONNECT])`
 */
const CONNECT = () => verbs([http_verbs_1.HttpVerbs.CONNECT]);
exports.CONNECT = CONNECT;
/**
 * The same as `verbs([HttpVerbs.OPTIONS])`
 */
const OPTIONS = () => verbs([http_verbs_1.HttpVerbs.OPTIONS]);
exports.OPTIONS = OPTIONS;
/**
 * The same as `verbs([HttpVerbs.PATCH])`
 */
const PATCH = () => verbs([http_verbs_1.HttpVerbs.PATCH]);
exports.PATCH = PATCH;
/**
 * The same as `verbs([HttpVerbs.ALL])`
 */
const ALL = () => verbs([http_verbs_1.HttpVerbs.ALL]);
exports.ALL = ALL;
//# sourceMappingURL=decorators.js.map